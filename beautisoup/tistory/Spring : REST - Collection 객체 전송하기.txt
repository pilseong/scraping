1. 이전 포스트에 약간 추가하여 Student List를 보내는 예제다. 1-1 여기에는 POJO객체가 사용되므로 lombok을 사용한다. <dependency>
		<groupId>org.projectlombok</groupId>
		<artifactId>lombok</artifactId>
		<version>1.18.12</version>
		<scope>provided</scope>
	</dependency> 2. 사용자는 webroot/api/students GET 요청을 보내면 REST api는 모든 학생 정보를 돌려준다. 2-1 Spring REST도 Dispatcher서블릿 앞에서 프록시처럼 동작하는데 2-2 요청을 받고 데이터 변환하는 역활을 Spring REST가 jackson을 사용하여 자동을 해준다. 3. 학생 클래스를 생성한다. package pe.pilseong.rest_test.entity;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class Student {
  
  private String firstName;
  private String lastName;

  public Student(String firstName, String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }
} 4. 학생 요청을 처리할 StudentController를 생성한다. 4-1 접근 url을 맞게 클래스단에 /api + 명령어 식으로 설정한다. 4-2 요청을 처리하는 메소드에서 List 객체를 넘겨주면 Spring REST는 자동으로 변환하여 반환한다. package pe.pilseong.rest_test.restcontroller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import pe.pilseong.rest_test.entity.Student;

@RestController
@RequestMapping("api")
public class StudentController {

  @GetMapping("/students")
  public List<Student> getStudents() {
    List<Student> students = new ArrayList<Student>();
    
    students.add(new Student("pilseong", "Heo"));
    students.add(new Student("suel", "Heo"));
    students.add(new Student("noel", "Heo"));
    
    return students;
  }
} 5. 결과화면