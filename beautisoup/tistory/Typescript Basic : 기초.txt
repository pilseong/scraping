-1. Typescript를 쓰는 이유는 자바스크립트에서 범하기 쉬운 사용자의 에러를 최소한으로 줄이기 위해서이다. -1-0 호출할 수 있는 메소드 이름과 속성과 반환값을 인지하여 사용자의 실수로 보이는 경우 모두 에러를 표시한다. 0. Typescript는 stong type system어서 type이 매우 중요하다. 아래 1-4까지 4가지가 주로 쓰인다. 0-1 boolean 0-2 number 0-3 string 0-4 any 0-5 undefined, null 0-6 기타 등등 (Array, Tuple, Enum, Void 등등 많이 있다.) 1. Typescript의 기본동작 1-1 Typescript는 Type inference를 사용하여 입력 값이 자명한 경우 타입을 설정하지 않아도 알아서 타입을 판단한다. 1-1-1 Type 유추는 선언 시에만 유용하기 때문에 선언 시 값을 할당하지 않는 경우 any로 판단한다. 1-1-2 any type변수는 typescript의 장점을 살릴 수 없으므로 선언 시 초기화하지 않더라도 타입은 지정하는 게 좋다. 2. Tempate String 2-1 Template String은 자바 형식의 String 작성 대신 kotlin/scala 형식의 String작성 구문을 지원한다. 2-2 한번 맛들이면 + 로 연결하는 방식은 귀찮아서 못쓴다. let found: boolean = true
let grade: number = 88.6
let firstName: string = "Pilseong"
let lastName: string = "Heo"

console.log(found);
console.log(`The grade is ${grade}`);
console.log(`H!~ ${firstName} ${lastName}`);

// 결과
$ node sample-types.js
true
The grade is 88.6
H1 Pilseong Heo 3. for loop 3-1 보통 java stream 방식의 foreach같은 걸로 처리한다. 3-2 아래처럼 for of 방식의 루프도 있다. Java의 for ( : ) 와 동일하다. let sports: string[] = ["Golf", "Cricket", "Tennis", "Swimming"]

sports.push("Baseball");
sports.push("Football")

for (let sport of sports) {
  console.log(sport)
}

console.log();

sports.forEach(sport=> console.log(sport))


// 실행 결과
$ node loops.js
Golf
Cricket
Tennis
Swimming
Baseball
Football

Golf
Cricket
Tennis
Swimming
Baseball
Football