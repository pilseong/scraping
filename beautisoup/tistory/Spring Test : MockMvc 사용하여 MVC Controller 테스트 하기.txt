0. JUint 4 기반의 테스트 코드이다. 1. MockMvc는 Web MVC Controller를 테스트 위해 만들어진 Unit Test용 클래스이다. 1-1 MockServletContext를 로딩하여 전체 application context 만들지 않고도 테스트 할 수 있게 해준다. 1-2 아래 코드에서 중요한 부분은 testMockMvc 메소드이다. 1-3 특정한 컨트롤러를 테스트할 수 있도록 도와주는 MockMvcBuilders를 제공한다. 1-4 perform 메소드를 통해 해당 컨트롤러의 메소드를 실행할 수 있고 1-5. MockMvcRequestBuilders, MockMvcResultMatchers의 get, status, view 메소드를 사용하여 상태를 확인한다. 1-6. get은 controller에 호출할 url을 지정하고, status는 해당 uri를 실행한 결과를 체크하는 함수이다. package pe.pilseong.recipe.controller;

import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import pe.pilseong.recipe.service.RecipeService;

import org.junit.Before;

public class IndexControllerTest {

  IndexController indexController;

  @Mock
  RecipeService recipeService;

  @Before
  public void setup() {
    MockitoAnnotations.initMocks(this);

    indexController = new IndexController(recipeService);
  }

  @Test
  public void testMockMvC() throws Exception {
    MockMvc mockMvc = MockMvcBuilders.standaloneSetup(indexController).build();

    mockMvc.perform(MockMvcRequestBuilders.get("/"))
      .andExpect(MockMvcResultMatchers.status().isOk())
      .andExpect(MockMvcResultMatchers.view().name("main"));
  }

  @Test
  public void test() {

  }
}