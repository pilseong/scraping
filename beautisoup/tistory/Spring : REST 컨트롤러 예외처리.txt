1. 직전 포스팅의 프로그램은 studentId가 범위를 벋어나는 경우 오류를 뿜어낸다. 2. 범위 뿐 아니라 숫자 대신에 문자를 입력하는 경우도 마찬가지이다. 3. 이런 오류를 정리된 형식의 Json형식으로 보내 싶으면 예외처리를 하면 된다. 3-1 우선 모든 예외를 받는 메소드를 하나 생성한다. @RestController
@RequestMapping("/api")
public class StudentController {

  ...

  @ExceptionHandler
  public ResponseEntity<StudentErrorResponse> errorHandling(Exception e) {
    StudentErrorResponse response = new StudentErrorResponse();
    response.setStatusCode(HttpStatus.BAD_REQUEST.value());
    response.setMessage(e.getMessage());
    response.setTimestamp(System.currentTimeMillis());
    
    return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
  }
  
  ... 3-1-1 이 메소드는 @ExceptionHandler annotation이 지정되어 있고 ResponseEntity를 반환해야 한다. 3-1-2 ResponseEntity는 반환하는 객체를 포장하는데 Response형태로 자동으로 변환해 준다. 3-1-3 여기에서는 오류정보를 담는 StudentErrorResponse라는 반환 클래스를 만들었다. 소스는 다음과 같다. 3-1-3-1 단순히 에러를 담는 그릇일 뿐이다. POJO이고 Jackson이 Json으로 변환할 객체이다. package pe.pilseong.restbasic.rest;

import lombok.Data;

@Data
public class StudentErrorResponse {
  
  private int statusCode;
  
  private String message;
  
  private long timestamp;
} 3-2 @ExceptionHandler annotation은 StudentController에서 예외가 발생하면 spring REST가 수신하여 처리한다. 3-2-1 오류를 수신하면 에러메시지가 내용을 반환할 객체에 담고 ResponseEntity에 wrap한 후 반환한다. 3-2-2 반환할 오류를 지정하는 것이 중요하다. 3-2-2-0 예외처리 전 어떤 코드가 발생한지를 확인하여 같은 코드로 처리한다. 위의 예제는 Bad Request 400이다. 3-2-2-1 예외처리 화면이다. 3-3 파라메터에 Exception을 받은 부분이 중요한 데, 특정한 예외를 받고 싶다면 그 예외를 지정해야 한다. 3-3-1 Exception을 받으면 모든 예외를 다 수신한다. 3-3-2 아니면 내부적으로 분기해서 처리할 수도 있다. 전체 2번 항목의 오류를 수정하는 코드는 아래와 같다. 3-3-2-1 숫자 대신에 문자가 입력시 발생하는 MethodArgumentTypeMismatchException을 처리하는 방법이다. 3-3-2-2 instanceof로 구분해서 처리하면 하나의 메소드로 처리가 가능하다. @ExceptionHandler
  public ResponseEntity<StudentErrorResponse> errorHandling(Exception e) {
    StudentErrorResponse response = new StudentErrorResponse();
    response.setStatusCode(HttpStatus.BAD_REQUEST.value());
    response.setMessage(e.getMessage());
    
    if (e instanceof MethodArgumentTypeMismatchException) {
      response.setMessage("You must request with number value");
    }
   
    response.setTimestamp(System.currentTimeMillis());
    
    return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
  } 3-3-3 예외 처리 화면 3-4 특정한 에러를 발생해서 구체적으로 처리하고 싶은 경우 에러를 만들어서 처리할 수 있다. 3-4-1 다음과 같이 RuntimeException을 받아 하나의 예외클래스를 만든다. package pe.pilseong.restbasic.rest;

public class StudentNotFoundException extends RuntimeException{

  public StudentNotFoundException(String message, Throwable cause) {
    super(message, cause);
  }

  public StudentNotFoundException(String message) {
    super(message);
  }

  public StudentNotFoundException(Throwable cause) {
    super(cause);
  }
} 3-4-2 예외를 발생시키고 싶은 상황에 해당 예외를 던진다. 3-4-2-1 아래 코드의 경우는 학생 collection의 범위를 벋어난 경우이다. @GetMapping("/students/{studentId}")
  public Student getStudent(@PathVariable("studentId") int id) {
    if (id >= this.students.size() || id < 0) {
      throw new StudentNotFoundException("Student Not Found");
    }
    return this.students.get(id);
  } 3-4-3 특정한 예외를 처리하는 코드를 추가한다. 특정 예외를 파라메터로 받아야 한다. 3-4-3-1 여기서는 StudentNotFoundException을 처리하기 때문에 그것을 받아와야 한다. @ExceptionHandler
  public ResponseEntity<StudentErrorResponse> errorHandling(StudentNotFoundException e) {
    StudentErrorResponse response = new StudentErrorResponse();
    response.setStatusCode(HttpStatus.NOT_FOUND.value());
    response.setMessage(e.getMessage());
    response.setTimestamp(System.currentTimeMillis());

    return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
  } 3-4-2-2 결과 화면이다. 4. 전체 Controller 소스코드이다. package pe.pilseong.restbasic.rest;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import pe.pilseong.restbasic.entity.Student;

@RestController
@RequestMapping("/api")
public class StudentController {

  private List<Student> students = new ArrayList<>();
  
  @PostConstruct
  public void loadStudent() {
    this.students.add(new Student("pilseong", "Heo"));
    this.students.add(new Student("suel", "Heo"));
    this.students.add(new Student("noel", "Heo"));
  }
  
  @GetMapping("/students")
  public List<Student> getStudents() {
    return students;
  }
  
  @GetMapping("/students/{studentId}")
  public Student getStudent(@PathVariable("studentId") int id) {
    if (id >= this.students.size() || id < 0) {
      throw new StudentNotFoundException("Student Not Found");
    }
    return this.students.get(id);
  }
  
  @ExceptionHandler
  public ResponseEntity<StudentErrorResponse> errorHandling(StudentNotFoundException e) {
    StudentErrorResponse response = new StudentErrorResponse();
    response.setStatusCode(HttpStatus.NOT_FOUND.value());
    response.setMessage(e.getMessage());
    response.setTimestamp(System.currentTimeMillis());

    return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
  }
  
  @ExceptionHandler
  public ResponseEntity<StudentErrorResponse> errorHandling(Exception e) {
    StudentErrorResponse response = new StudentErrorResponse();
    response.setStatusCode(HttpStatus.BAD_REQUEST.value());
    response.setMessage(e.getMessage());
    
    if (e instanceof MethodArgumentTypeMismatchException) {
      response.setMessage("You must request with number value");
    } 
    response.setTimestamp(System.currentTimeMillis());
    
    return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
  }
}