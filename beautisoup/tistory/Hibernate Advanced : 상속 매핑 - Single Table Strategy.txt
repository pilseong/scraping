1. 이 포스트와 앞으로 3개의 포스트는 하이버네이트의 Inheritance Mapping에 대해서 설명한다. 1-1  클래스의 상속 구조를 데이터베이스에 매핑하는 정책은 4가지가 있다. 1-1-1 Single Table Strategy - 하나의 클래스에 모든 자식클래스 정보까지 다 때려 넣는다. 1-1-2 Table per Class Strategy - 자식 클래스 마다 테이블이 생성되는데 공통 id를 위한 추가 테이블이 생성된다. 1-1-3 Joined Table Strategy - 부모클래스, 자식클래스 모두 하나 씩 생성된다. 자식클래스는 고유의 속성만 가진다. 1-1-4 Mapped Superclass Strategy - 자식 클래스 마다 테이블이 생성된다. 부모클래스는 완전히 역활이 없다. 2. 상속을 사용하면 강한 연관이 발생하기 때문에 메핑이 복잡해지고 프로그램의 복잡성도 올라가게 된다. 2-1. 성능 상에도 문제가 될 수 있다는 점을 참고해야 한다. 3. Single Table Strategy의 장단점 3-1 장점 3-1-1 하나의 테이블을 사용하므로 빠르다. 3-1-2 구조가 단순하고 이해하기가 쉽다. 3-2 단점 3-2-1 null인 field가 생길 수 있고 데이터의 중복이 발생하기 쉽다. 즉 정규화가 안된 테이블이다. 4. 이 포스트는 첫번째 Single Table Strategy를 설명한다. 4-0 기본값이기 때문에 @Inheritance, @DiscriminatorColumn, @DiscriminatorValue 모두 optional이다. 4-1 상속의 구조는 User라는 공통의 속성을 가지고 Student와 Teacher가 User를 상속하는 형식을 예로 든다. 4-2 단독 테이블 정책은 부모 자식의 모든 정보를 하나의 테이블이 다 담고 있어야 한다. 4-3 하나의 테이블을 여러 자식들이 사용하려면 어떤 자식인지를 알기 위해 구분자가 필요하다. 5. Annoation 설명 5-1 @Inheritance - 1번에서 설명한 상속정책을 설정하고, 부모 클래스 선언에 지정한다. 5-1-1 선택적이고 기본값이다. 없어도 추론에 의해서 자동 설정된다. 5-1-1 Single Table Strategy를 지정하려면 @Inheritance(strategy = InheritanceType.SINGLE_TABLE) 5-2 @DiscriminatorColumn - 구분자 컬럼을 지정하여 어떤 자식클래스의 데이터인지 알려준다. 5-2-0 선택적이다. 없으면 DTYPE이라는 컬럼이 테이블에 생긴다. 5-2-1 부모 클래스 선언에 지정한다. 5-2-2 이름을 설정할 수도 있고, 기본값은 DTYPE이다. @DiscriminatorColumn(name = "USER_TYPE", discriminatorType = DiscriminatorType.STRING) 5-3 @DiscriminatorValue - 각 자식 클래스를 구분하는 이름을 지정한다. 5-3-0 선택적이다. 없으면 자식 클래스 이름이 사용된다. 5-3-1 자식클래스 선언에 지정한다. 5-3-2 지정하는 이름을 지정하는데 기본값은 자식 클래스 이름과 동일하다. @DiscriminatorValue(value = "STUDENT") 5-4 기본값으로 지정한 헤더 부분 @Entity
@Table(name = "user")
@Data
@NoArgsConstructor
public abstract class User {


@Entity
@Table(name = "student")
@Data
@EqualsAndHashCode(callSuper=false)
@NoArgsConstructor
public class Student extends User {


@Entity
@Table(name = "teacher")
@Data
@EqualsAndHashCode(callSuper=false)
public class Teacher extends User { 5-5 기본값으로만 설정한 경우 테이블 결과 5-5-1 user테이블이 생성되었고 모든 데이터가 여기에 다 들어간다. 그래서 null인 값들이 생길 수 밖에 없다. 6. Entity 설정 6-0 완전하게 설정한 예제를 보여준다. 6-1 User Entity 6-1-1 구분 field 이름을 type으로 설정하였다. package pe.pilseong.singletable.entity;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.Table;

import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "user")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "type")
@Data
@NoArgsConstructor
public abstract class User {
  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  
  @Column(name = "firstName")
  private String firstName;
  
  @Column(name = "lastName")
  private String lastName;
  
  @Column(name = "email")
  private String email;

  public User(String firstName, String lastName, String email) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
  }
} 6-2 Student 6-2-1 구분 field에 들어갈 값을 소문자 student로 설정하였다. 6-2-2 @EqualsAndHashCode는 상속의 경우 @Data가 warning이 뜨는데 이것을 제거하기 위해 삽입한 내용이다. 6-2-2-1 그냥 무시하면 된다. 6-2-3 Enumeration을 사용하고 있는데 저장타입을 String으로 해서 enum이름이 DB에 저장된다. package pe.pilseong.singletable.entity;

import javax.persistence.Column;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Table;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "student")
@DiscriminatorValue(value = "student")
@Data
@EqualsAndHashCode(callSuper=false)
@NoArgsConstructor
public class Student extends User {

  @Enumerated(EnumType.STRING)
  @Column(name = "schoo_level")
  private Level level;
  
  @Column(name = "course")
  private String course;

  public Student(String firstName, String lastName, String email, Level level, String course) {
    super(firstName, lastName, email);
    this.level = level;
    this.course = course;
  }
} 6-3 Teacher package pe.pilseong.singletable.entity;

import javax.persistence.Column;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.Table;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity
@Table(name = "teacher")
@DiscriminatorValue(value = "teacher")
@Data
@EqualsAndHashCode(callSuper=false)
public class Teacher extends User {

  @Column(name = "salary")
  private Double salary;

  public Teacher(String firstName, String lastName, String email, Double salary) {
    super(firstName, lastName, email);
    this.salary = salary;
  }  
} 7. 실행결과 7-1 실행코드 package pe.pilseong.singletable;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import pe.pilseong.singletable.entity.Level;
import pe.pilseong.singletable.entity.Student;
import pe.pilseong.singletable.entity.Teacher;
import pe.pilseong.singletable.entity.User;

/**
 * Hello world!
 *
 */
public class App {
  public static void main(String[] args) {
    SessionFactory factory = new Configuration().configure()
        .addAnnotatedClass(User.class)
        .addAnnotatedClass(Student.class)
        .addAnnotatedClass(Teacher.class)
        .buildSessionFactory();
    
    Session session = factory.getCurrentSession();
    session.beginTransaction();
    
    Student student = new Student("Pilseong", "Heo", "heops79@gmail.com", Level.TERIARY, "Software Engineering");
    Teacher teacher = new Teacher("Suel", "Heo", "suel@gmai.com", 1000000D);
   
    session.save(student);
    session.save(teacher);
    
    session.getTransaction().commit();
    
    factory.close();
    
  }
} 7-2 실행 테이블 결과 7-2-1 이름을 설정한 대로 구분 컬럼이름은 type, 각 구분 값은 소문자로 된 student, teacher이다.